.page {
    align-items: center;
    display: flex;
    flex-direction: column;
}
.loading-page {
    width: 100vw;
    height: 80vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

h2 {
    margin-bottom: 3rem;
}

table {
    border-collapse: collapse;
    border: 1px solid lightgray;
    width: 80%;
    margin: 0 auto;
}

th, td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #DDD;
}

tbody > tr:hover {background-color: #a8fbff;}

form {
    background-color: #f8fbff;
    width: 90%;
    max-width: 500px;
    justify-content: center;
    align-items: center;
    border-radius: 30px;
    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);
}

.main-button {
    background-color: #5770d0;
    display: inline-flex; /* Needed as react links are odd, I think this is stupid */
    width: 250px;
    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.5);
    margin: 20px;
    justify-content: center;
    text-decoration: none;
    align-items: center;
    border-radius: 30px;
}

.main-button > div > h3 {
    color: white;
}

.railtrack {
    width: 200px;
    height: 200px;
    background-color: blue;
}

:root {
    --circle-radius: 115px; /* Radius of the circular path */
    --center-x: -100px; /* X adjustment for the center */
    --center-y: 0px; /* Y adjustment for the center */
}

.thomas {
    width: 50px;
    height: 30px;
    position: absolute;
}

@keyframes rotate {
    0% {
        transform: translate(var(--center-x), var(--center-y)) rotate(0deg)
            translate(var(--circle-radius)) rotate(100deg);
    }
    25% {
        transform: translate(var(--center-x), var(--center-y)) rotate(90deg)
            translate(var(--circle-radius)) rotate(100deg);
    }
    50% {
        transform: translate(var(--center-x), var(--center-y)) rotate(180deg)
            translate(var(--circle-radius)) rotate(100deg);
    }
    75% {
        transform: translate(var(--center-x), var(--center-y)) rotate(270deg)
            translate(var(--circle-radius)) rotate(100deg);
    }
    100% {
        transform: translate(var(--center-x), var(--center-y)) rotate(360deg)
            translate(var(--circle-radius)) rotate(100deg);
    }
}

@keyframes error-rotate {
    0% {
        transform: translate(var(--center-x), var(--center-y)) rotate(0deg)
            translate(var(--circle-radius)) rotate(100deg);
    }
    25% {
        transform: translate(
                calc(var(--center-x) + 20px),
                calc(var(--center-y) - 20px)
            )
            rotate(90deg) translate(var(--circle-radius)) rotate(150deg);
    }
    50% {
        transform: translate(
                calc(var(--center-x) - 20px),
                calc(var(--center-y) + 20px)
            )
            rotate(180deg) translate(var(--circle-radius)) rotate(50deg);
    }
    75% {
        transform: translate(
                calc(var(--center-x) + 20px),
                calc(var(--center-y) + 20px)
            )
            rotate(270deg) translate(var(--circle-radius)) rotate(200deg);
    }
    100% {
        transform: translate(var(--center-x), var(--center-y)) rotate(360deg)
            translate(var(--circle-radius)) rotate(100deg);
    }
}

.error-tainer {
    position: relative;
    animation-name: error-rotate;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-duration: 3s;
}

.loading-data {
    margin-top: -40vw;
}

.tom-tainer {
    position: relative;
    animation-name: rotate;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-duration: 3s;
}
